/*
 * TCSS 305
 * Assignment 5 - PowerPaint
 */

package gui;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.RenderingHints;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

import javax.swing.JPanel;

/**
 * Panel displays the painting in the GUI.
 * @author tvo93
 * @version 2/12/2016
 */
public class PowerPaintPanel extends JPanel {

    /**
     * The minimum size for this JPanel.
     */
    private static final Dimension DEFAULT_SIZE = new Dimension(500, 400);
   
    /** A generated serialization ID. */
    private static final long serialVersionUID = 7873071423586547461L;
    
    /**
     * The Red Color value.
     */
    private static final int RED_VALUE = 51;
    
    /**
     * The Green Color value.
     */
    private static final int GREEN_VALUE = 0;
    
    /**
     * The blue Color value.
     */
    private static final int BLUE_COLOR = 111;
   
    /**
    * Null point.
    */
    private static final Point NO_POINT = null;
    /**
     * default stroke.
     */
    private static final float STROKE_VALUE = 5f;
    /** The color. */
    private Color myColor;
   
   
    /** A collection of Points representing lines. */
    private final List<Point> myLines;
    /** The start point for the Shape. */
    private Point myStartPoint; 
    /** The end point for the Shape. */
    private Point myEndPoint;   
   
    
    /**
     * check if line is painted.
     */
    private boolean myLineIsPaint;
    
    /**
    * Construct the panel.
    */
    public PowerPaintPanel() {
        super(); 
        
        myLines = new ArrayList<Point>();
        myLineIsPaint = true;
        myColor =  new Color(RED_VALUE, GREEN_VALUE, BLUE_COLOR);
        setPreferredSize(DEFAULT_SIZE);
        setBackground(Color.WHITE);
    }

    
   
    
    
 
   
    /**
     * Paints this panel on the screen with the specified Graphics object.
     * 
     * @param theGraphics The Graphics object.
     */
    @Override
    public void paintComponent(final Graphics theGraphics) {
        super.paintComponent(theGraphics);
        final Graphics2D g = (Graphics2D) theGraphics; 
        g.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                            RenderingHints.VALUE_ANTIALIAS_ON);
      

        setCursor(Cursor.getPredefinedCursor(Cursor.CROSSHAIR_CURSOR));

       
        // Display drawShape method here
        drawShapes(g);  
    }
    
    /**
     * Draw the shapes depending on which shape is selected.
     * @param theGraphics  the graphics
     */
    public void drawShapes(final Graphics2D theGraphics) {
        
        super.paintComponent(theGraphics);
        final Graphics2D g2 = (Graphics2D) theGraphics;
        g2.setColor(myColor);
        
        g2.setStroke(new BasicStroke(STROKE_VALUE));
        lineDraw();
        
        // get this idea from provided code
        for (int i = 0; i < myLines.size(); i += 2) {
            final Point p1 = myLines.get(i);
            final Point p2 = myLines.get(i + 1);
            g2.drawLine(p1.x, p1.y, p2.x, p2.y);
        }
        
        if (!Objects.equals(myEndPoint, NO_POINT)) { 
            g2.drawLine(myStartPoint.x, myStartPoint.y, myEndPoint.x, myEndPoint.y);
        }
    }
    
    /**
     * Record the start point.
     * @param thePoint the point
     */
    public void startPoint(final Point thePoint) {
        if (myLineIsPaint) {
            if (myEndPoint != null) { 
                myLines.add(myStartPoint);
                myLines.add(myEndPoint);
            }
            myStartPoint = thePoint;
            myEndPoint = NO_POINT; 
        
        }
    }
    
    /**
     * Records the current position of the mouse during a drag.
     * 
     * @param thePoint the end point of the shape
     */
    public void dragPoint(final Point thePoint) {
        if (myLineIsPaint) {
            
            myEndPoint = (Point) thePoint.clone();
            repaint();
        }
    }
    
    /**
     * set drawing the line.
     */
    public void lineDraw() {
        myLineIsPaint = true;
    }
    
    
   
    
    
    
    /**
     * Get color.
     * @return the color
     */
    public Color getColor() {    
        return myColor;
    }
    
    /**
     * Set color.
     * @param theColor the color
     * @throws IllegalArgumentException if the color is null
     */
    public void setColor(final Color theColor) throws IllegalArgumentException {
        if (theColor == null) {
            throw new IllegalArgumentException("Color cannot be null.");
        }
        myColor = theColor;
    }
  
  
}
   