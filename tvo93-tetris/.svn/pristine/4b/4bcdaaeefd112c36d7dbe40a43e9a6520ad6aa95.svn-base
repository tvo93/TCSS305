package view;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.util.ArrayList;
import java.util.List;
import java.util.Observable;
import java.util.Observer;

import javax.swing.JPanel;

import model.Block;
import model.Board;





public class TetrisBoardPanel extends JPanel implements Observer {

  
    /**
     * 
     */
    private static final long serialVersionUID = 1L;

    /**
     * The width of default size of the board panel(medium).
     */
    private static final int DEFAULT_BOARD_WIDTH = 300;

    
    /**
     * The height of default size the board panel(medium).
     */
    private static final int DEFAULT_BOARD_HEIGHT = 600;
   
    private final List<Block[]> myTetrisBlocks;
    
    /**
     * Constructs the BoardPanel.
     */
    public TetrisBoardPanel(final Board theBoard) {
        super(true);
       // myFrozenBlocks = new LinkedList<Block[]>();
       // myBoard = theBoard;
       // myNonRandomPieces = new ArrayList<TetrisPiece>();
        myTetrisBlocks = new ArrayList<Block[]>();
        setBackground(Color.BLACK);
        setPreferredSize(new Dimension(DEFAULT_BOARD_WIDTH, DEFAULT_BOARD_HEIGHT));
        setVisible(true);
      
    }
    
    public void paintComponent(final Graphics theGraphics) {
        super.paintComponent(theGraphics);
        final Graphics2D g = (Graphics2D) theGraphics;
        g.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                             RenderingHints.VALUE_ANTIALIAS_ON);        
  
        for (int i = 0; i < myTetrisBlocks.size(); i++) {       
            final Block[] blocks = myTetrisBlocks.get(i);          
            for (int j = 0; j < blocks.length; j++) {            
                if (blocks[j] != null) {    
                    g.setPaint(Color.BLUE);
                    g.fillOval(j * 20, (19 - i) * 20
                                         , 20, 20);
                } 
            }
        }
            
       
    }
   
    
    @Override
    public void update(final Observable theObservable, final Object theData) {
        repaint();
    }
             
}

