package view;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.Action;
import javax.swing.JFrame;
import javax.swing.Timer;

import model.Board;

public class TetrisGUI {
 
  
    /**The width of the game board.*/
    private static final int WIDTH = 10;
    /** The delay (in milliseconds) for the move timer. */
    private static final int DELAY = 400;
    /**The height of the game board.*/
    private static final int HEIGHT = 20;
    /** A ToolKit. */
    private static final Toolkit KIT = Toolkit.getDefaultToolkit();
    
    /** The Dimension of the screen. */
    private static final Dimension SCREEN_SIZE = KIT.getScreenSize();

    /**
     * The board object that include all pieces and its logics.
     */
    private final Board myBoard = new Board(WIDTH, HEIGHT);
    /**
     * The JFrame of the game.
     */
    private final JFrame myFrame;
    
    private final TetrisBoardPanel myBoardPanel;
    
    /** The timer that controls the movement of blocks. */
    private final Timer myMoveTimer;
    /**
     * The menu bar.
     */
    private final MenuBar myMenuBar;

    
    public TetrisGUI() {
        myFrame = new JFrame("Tetris");
        myMenuBar = new MenuBar(myFrame);
       
        myBoardPanel = new TetrisBoardPanel(myBoard);
        
       
        myMoveTimer = new Timer(DELAY, null);
        myBoard.addObserver(myBoardPanel);
        
       
       
    }
    
    public void start() {
        setupListeners();
        myMenuBar.setBackground(Color.LIGHT_GRAY);
        myMenuBar.setForeground(Color.BLACK);
        myFrame.setJMenuBar(myMenuBar);  
       
        myBoardPanel.setFocusable(true);
        myBoardPanel.requestFocusInWindow();
      
  
       
        myFrame.add(myBoardPanel, BorderLayout.CENTER);
        
        
        myFrame.setPreferredSize(myBoardPanel.getPreferredSize());
        // position the frame in the center of the screen
        myFrame.setLocation(SCREEN_SIZE.width / 2 - myFrame.getWidth() / 2,
                    SCREEN_SIZE.height / 2 -  myFrame.getHeight() / 2);
        myFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        myFrame.setVisible(true);
       
        myFrame.pack();
    }
    /** Sets up event listeners. */
    public void setupListeners() {
        myMoveTimer.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(final ActionEvent theEvent) {
               
                myBoard.step();        
            }
        });     
        myMoveTimer.start();  
    }
   
}
