/*
    * TCSS 305 
    * Assignment 6 - Tetris
    */

package view;

import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.util.ArrayList;
import java.util.List;
import java.util.Observable;
import java.util.Observer;

import javax.swing.JPanel;

import model.Block;
import model.Board;
import model.Point;




/**
 * Board Panel to display the Board game on the panel.
 * @author tvo93
 * @version 3/2/2016
 */
public class TetrisBoardPanel extends JPanel implements Observer {

  
    /** A generated serialization ID. */
    private static final long serialVersionUID = 1L;

    /** The scale.*/
    private static final int SCALE = 10;
    
    /** The font size.*/
    private static final int FONT_SIZE = 25;
    
    /**
     * The hide color.
     */
    private final Color myHidenColor =  new Color(0, 0, 0, 200);
   
    /**
     * Tetris block lists.
     */
    private final List<Block[]> myTetrisBlocks;
    
    /**
     * check if game is over.
     */
    private boolean myGameOverIsViewable;
    
    /**
     * Constructs the BoardPanel.
     */
    public TetrisBoardPanel() {
        super();
        
       
        myTetrisBlocks = new ArrayList<Block[]>();
       
        setBackground(Color.BLACK);
        
      //  setPreferredSize(new Dimension(DEFAULT_BOARD_WIDTH, DEFAULT_BOARD_HEIGHT));
        setVisible(true);
       
      
    }
  
    /**
     * Repaints the component with the specified graphics context.
     * Draw the pieces.
     * @param theGraphics the graphic context
     */
    public void paintComponent(final Graphics theGraphics) {
        super.paintComponent(theGraphics);
        final Graphics2D g = (Graphics2D) theGraphics;
        g.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                             RenderingHints.VALUE_ANTIALIAS_ON);   
        
        final int scale = getWidth() / 10;
        drawRectShape(g, scale);
        if (myGameOverIsViewable) {
            drawGameOver(g);
        }
        
        
    }
   
    
    /**
     * Draw rectangle shape to display for blocks.
     * @param theGraphics the graphics
     * @param theScale the scale
     */
    public void drawRectShape(final Graphics theGraphics, final int theScale) {
        super.paintComponent(theGraphics);
        final Graphics2D g = (Graphics2D) theGraphics;
        for (int i = 0; i < myTetrisBlocks.size(); i++) {
            
            final Block[] blockArray = myTetrisBlocks.get(i);
           // final Color[] colorArray = itr.next();
                   
            for (int j = 0; j < blockArray.length; j++) {
               
                final Point point = new Point(j *  theScale
                                        , i *  theScale);             
                if (blockArray[j] != null) {
                    g.setColor(Color.GREEN);
                    g.fill3DRect(point.x(), getHeight() - point.y() -   theScale, 
                                 theScale,  theScale, true);
                    g.setColor(Color.RED);
//                    g.drawRoundRect(point.x(), getHeight() - point.y() - BLOCK_SIZE, 
//                                    BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE);
                   
                    g.draw3DRect(point.x(), getHeight() - point.y() -   theScale,
                                 theScale,  theScale, true);
                }      
                
            }
        }
    }
   
    /**
     * Draw end game.
     *
     * @param theGraphics the graphics 
     */
    private void drawGameOver(final Graphics2D theGraphics) {
        final Graphics2D g = theGraphics;
        g.setPaint(myHidenColor);
        g.fillRect(0, 0, getWidth(), getHeight());
        g.setPaint(Color.RED);
        g.setFont(new Font("Osaka", Font.BOLD, FONT_SIZE));
        g.drawString("GAME OVER", getWidth() / SCALE + SCALE, 
                     getHeight() / 2);
    }
    
    /**
     * Set game over.
     * @param theOver the game over
     */
    public void setGameOver(final boolean theOver) {
        myGameOverIsViewable = theOver;
    }
    
    @Override
    public void update(final Observable theObservable, final Object theData) {
        
        if (theObservable instanceof Board && theData instanceof List) {
            myTetrisBlocks.clear();           
            for (int i = 0; i < ((List<?>) theData).size(); i++) {
                final Block[] blockArray = (Block[]) ((List<?>) theData).get(i);
                myTetrisBlocks.add(blockArray);
            }
        }
        
        repaint(); 
    }
    
}

